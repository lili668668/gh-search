{"version":3,"sources":["App/modules/search/components/SearchField.js","App/modules/search/components/ResultListCoreBase.js","App/modules/search/components/ResultListItem.js","App/modules/search/components/ResultListCore.js","App/modules/search/components/ResultList.js","App/modules/search/components/RepositoryListItem.js","App/util/hooks.js","App/modules/search/components/InfiniteScrollList.js","App/modules/search/duck/selectors.js","App/util/createSelector.js","App/modules/search/pages/Search.js"],"names":["SearchField","props","onChange","defaultValue","react_default","a","createElement","TextField_default","label","fullWidth","ResultListCoreBase","items","List","listComponent","ListItem","listItemComponent","dx_react_core_es","name","params","map","item","index","Object","assign","key","defaultProps","components","ResultListItem","message","ListItem_default","ListItemText_default","primary","Typography_default","variant","withComponents","ResultList","children","restProps","objectWithoutProperties","ResultListCore","RepositoriesListItem","fullName","htmlUrl","language","component","button","href","secondary","useSelector","selector","input","arguments","length","undefined","mapState","useCallback","useMappedState","InfiniteScrollList","loadMore","loading","handleScroll","_useState3","useState","_useState4","slicedToArray","initialized","setInitialized","useEffect","window","addEventListener","event","removeEventListener","useScrollListener","scrollTop","document","documentElement","body","scrollHeight","clientHeight","innerHeight","scrollToBottom","Math","ceil","selectors","selectSearch","state","router","location","search","selectRepositoriesMeta","meta","repositories","getRepositories","entity","createSelector","ids","filter","id","getRepositoriesMeta","createMetaSelector","getQuery","queryString","parse","Search","defaultQuery","fetchRepositories","fetchAction","routerAction","push","dispatch","useDispatch","path","pathname","_useState","_useState2","query","fetchByUrl","newPath","concat","stringify","useFetchByQuery","actions","replace","ref","useRef","useLayoutEffect","current","handleLoadMore","url","pagination","nextUrl","metaId","components_SearchField","q","target","value","components_ResultList","RepositoryListItem","components_InfiniteScrollList","status"],"mappings":"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","file":"static/js/4.a04fc52a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport TextField from '@material-ui/core/TextField'\n\nfunction SearchField (props) {\n  const { onChange, defaultValue } = props\n  return (\n    <TextField\n      label=\"Search GitHub\"\n      fullWidth\n      onChange={onChange}\n      defaultValue={defaultValue}\n    />\n  )\n}\n\nSearchField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  defaultValue: PropTypes.string\n}\n\nexport default SearchField\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Plugin, Template, TemplatePlaceholder } from '@devexpress/dx-react-core'\n\nfunction ResultListCoreBase (props) {\n  const { items } = props\n  const {\n    listComponent: List,\n    listItemComponent: ListItem\n  } = props\n  return (\n    <Plugin>\n      <Template name=\"root\">\n        <TemplatePlaceholder name=\"list\" params={items} />\n      </Template>\n      <Template name=\"list\">\n        {(items) => (\n          <List>\n            {items.map((item, index) => (<ListItem key={index} {...item} />))}\n          </List>\n        )}\n      </Template>\n    </Plugin>\n  )\n}\n\nResultListCoreBase.defaultProps = {\n  items: []\n}\n\nResultListCoreBase.propTypes = {\n  listComponent: PropTypes.func,\n  listItemComponent: PropTypes.func,\n  items: PropTypes.array\n}\n\nResultListCoreBase.components = {\n  listComponent: 'List',\n  listItemComponent: 'ListItem'\n}\n\nexport default ResultListCoreBase\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nfunction ResultListItem (props) {\n  const { message } = props\n  return (\n    <ListItem>\n      <ListItemText\n        primary={<Typography variant=\"subtitle1\">{message}</Typography>}\n      />\n    </ListItem>\n  )\n}\n\nResultListItem.defaultProps = {\n  message: ''\n}\n\nResultListItem.propTypes = {\n  message: PropTypes.string\n}\n\nexport default ResultListItem\n","import { withComponents } from '@devexpress/dx-react-core'\nimport List from '@material-ui/core/List'\nimport ResultListCoreBase from './ResultListCoreBase'\nimport ResultListItem from './ResultListItem'\n\nexport default withComponents({\n  List,\n  ListItem: ResultListItem\n})(ResultListCoreBase)\n","import React from 'react'\nimport { PluginHost } from '@devexpress/dx-react-core'\nimport ResultListCore from './ResultListCore'\n\nfunction ResultList (props) {\n  const { children, ...restProps } = props\n  return (\n    <PluginHost>\n      <ResultListCore {...restProps} />\n      {children}\n    </PluginHost>\n  )\n}\n\nexport default ResultList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Typography from '@material-ui/core/Typography'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\n\nfunction RepositoriesListItem (props) {\n  const { fullName, htmlUrl, language } = props\n  return (\n    <ListItem component=\"a\" button href={htmlUrl}>\n      <ListItemText\n        primary={<Typography variant=\"subtitle1\">{fullName}</Typography>}\n        secondary={<Typography variant=\"body2\">{language}</Typography>}\n      />\n    </ListItem>\n  )\n}\n\nRepositoriesListItem.defaultProps = {\n  fullName: '',\n  htmlUrl: '',\n  language: ''\n}\n\nRepositoriesListItem.propTypes = {\n  fullName: PropTypes.string,\n  htmlUrl: PropTypes.string,\n  language: PropTypes.string\n}\n\nexport default RepositoriesListItem\n","import { useState, useCallback, useEffect } from 'react'\nimport { useDispatch, useMappedState } from 'redux-react-hook'\nimport { push } from 'connected-react-router'\nimport queryString from 'query-string'\n\nexport function useFetchByQuery (defaultQuery, fetchAction, routerAction = push) {\n  const dispatch = useDispatch()\n  const mapState = useCallback(state => ({\n    path: state.router.location.pathname\n  }), [])\n  const { path } = useMappedState(mapState)\n\n  const [initialized, setInitialized] = useState(false)\n  useEffect(() => {\n    if (!initialized) {\n      dispatch(fetchAction(defaultQuery))\n      setInitialized(true)\n    }\n  })\n\n  const fetch = (query) => {\n    if (!query.fetchByUrl) {\n      const newPath = `${path}?${queryString.stringify(query)}`\n      dispatch(routerAction(newPath))\n    }\n    dispatch(fetchAction(query))\n  }\n\n  return fetch\n}\n\nexport function useSelector (selector, input = []) {\n  const mapState = useCallback(selector, input)\n  return useMappedState(mapState)\n}\n\nexport function useScrollListener (handleScroll) {\n  const [initialized, setInitialized] = useState(false)\n  useEffect(() => {\n    if (!initialized) {\n      window.addEventListener('scroll', (event) => handleScroll(event))\n      setInitialized(true)\n    }\n    return window.removeEventListener('scroll', handleScroll)\n  })\n}\n","import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { Plugin, Template, TemplatePlaceholder } from '@devexpress/dx-react-core'\nimport { useScrollListener } from '../../../util/hooks'\n\nfunction InfiniteScrollList (props) {\n  const { loadMore, loading } = props\n  const handleScroll = useCallback(() => {\n    const scrollTop = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop\n    const scrollHeight = (document.documentElement && document.documentElement.scrollHeight) || document.body.scrollHeight\n    const clientHeight = document.documentElement.clientHeight || window.innerHeight\n    const scrollToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight\n    if (loadMore && !loading && scrollToBottom) loadMore()\n  }, [loadMore])\n  useScrollListener(handleScroll)\n  return (\n    <Plugin>\n      <Template name=\"list\">\n        {(items) => (\n          <TemplatePlaceholder />\n        )}\n      </Template>\n    </Plugin>\n  )\n}\n\nInfiniteScrollList.defaultProps = {\n  loadMore: null,\n  loading: false\n}\n\nInfiniteScrollList.propTypes = {\n  loadMore: PropTypes.func,\n  loading: PropTypes.bool\n}\n\nexport default InfiniteScrollList\n","import { createSelector } from 'reselect'\nimport queryString from 'query-string'\nimport { createListSelector, createMetaSelector } from '../../../util/createSelector'\n\nexport const selectSearch = state => state.router.location.search\n\nexport const selectRepositoriesEntity = state => state.search.entity.repositories || {}\nexport const selectRepositoriesMeta = state => state.search.meta.repositories || {}\n\nexport const getRepositories = createListSelector([selectSearch, selectRepositoriesEntity, selectRepositoriesMeta])\nexport const getRepositoriesMeta = createMetaSelector([selectSearch, selectRepositoriesMeta])\nexport const getQuery = createSelector(selectSearch, (search) => queryString.parse(search))\n","import { createSelector } from 'reselect'\n\nexport function createListSelector (selectors) {\n  return createSelector(\n    selectors,\n    (search, entity, meta) => {\n      const selectedMeta = meta[search] || {}\n      const ids = selectedMeta.ids || []\n      const list = ids\n        .filter(id => entity[id] !== undefined)\n        .map(id => entity[id])\n      return list\n    }\n  )\n}\n\nexport function createMetaSelector (selectors) {\n  return createSelector(\n    selectors,\n    (search, meta) => meta[search] || {}\n  )\n}\n","import React, { useRef, useLayoutEffect, useCallback } from 'react'\nimport { replace } from 'connected-react-router'\nimport SearchField from '../components/SearchField'\nimport ResultList from '../components/ResultList'\nimport RepositoryListItem from '../components/RepositoryListItem'\nimport InfiniteScrollList from '../components/InfiniteScrollList'\n\nimport { useFetchByQuery, useSelector } from '../../../util/hooks'\nimport { getRepositories, getRepositoriesMeta, getQuery } from '../duck/selectors'\nimport * as actions from '../duck/actions'\n\nfunction Search (props) {\n  const repositories = useSelector(getRepositories)\n  const meta = useSelector(getRepositoriesMeta)\n  const defaultQuery = useSelector(getQuery)\n  const fetchRepositories = useFetchByQuery(defaultQuery, actions.fetchRepositories, replace)\n  const ref = useRef()\n  useLayoutEffect(() => {\n    ref.current = meta\n  })\n  const handleLoadMore = useCallback(() => {\n    const meta = ref.current\n    fetchRepositories({ fetchByUrl: true, url: meta.pagination.nextUrl, metaId: meta.id })\n  }, [ref])\n  return (\n    <section>\n      <SearchField\n        defaultValue={defaultQuery.q}\n        onChange={(event) => fetchRepositories({ q: event.target.value })}\n      />\n      <ResultList\n        items={repositories}\n        listItemComponent={RepositoryListItem}\n      >\n        <InfiniteScrollList\n          loading={meta.status === 'loading'}\n          loadMore={handleLoadMore}\n        />\n      </ResultList>\n    </section>\n  )\n}\n\nexport default Search\n"],"sourceRoot":""}